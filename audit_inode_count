#!/bin/bash

########################################################################################
# Reports the number of inodes, user, and date of each subfolder of the target folder  #
########################################################################################
# EXAMPLE:
# $ ./audit_inode_count /scratch/projects/lab/
# FOLDER                                  INODES  USER    DATE        COMMENT
# /scratch/projects/lab/.snapshots        47803+  root    1969-12-31  [permission error][2 years old]
# /scratch/projects/lab/data              1539    user2   2024-11-22  
# /scratch/projects/lab/user1             1233    user1   2024-06-20  [deactivated user]
# /scratch/projects/lab/2024-11-21_H5W    1+      user2   2024-11-25  [permission error]

module load parallel/20201022

# Set colors for output
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Default is the present working directory; otherwise, use the first argument
ROOT_FOLDER=$(echo "${1:-.}" | sed 's:/*$::')

# Validate that ROOT_FOLDER is a valid directory
if [ ! -d "$ROOT_FOLDER" ]; then
    echo -e "${RED}Error:${NC} $ROOT_FOLDER is not a valid directory"
    exit 1
fi

# Find and save all subfolders of ROOT_FOLDER, sorting them
FIND=$(find "${ROOT_FOLDER}" -mindepth 1 -maxdepth 1 -type d -printf "%f,%TY-%Tm-%Td,%u\n" | sort)

# Function to process each folder
process_folder() {
    local entry="$1"
    IFS=',' read -r FOLDER DATE USER <<< "$entry" # Split the entry into FOLDER, DATE, and USER
    COMMENT=""

    # Count the number of inodes (files) in the folder
    OUTPUT=$(find "${ROOT_FOLDER}/${FOLDER}" 2>&1) 
    INODES_OUTPUT=$(echo "$OUTPUT" | grep -v "Permission denied" | wc -l)
    if [[ "$OUTPUT" == *"Permission denied"* ]]; then
        COMMENT+="[permission error]"
        INODES="${INODES_OUTPUT}+"
    else
        INODES=$INODES_OUTPUT
    fi

    # Check if the user is deactivated (user ID is numeric)
    if [[ ${USER} =~ ^[0-9]+$ ]]; then
        COMMENT+="[deactivated user]"
    fi

    # Calculate the age of the folder in days
    if [[ -n "$DATE" ]]; then
        FOLDER_DATE=$(date -d "$DATE" +%s 2>/dev/null || echo "0")
        if [[ $FOLDER_DATE -ne 0 ]]; then
            CURRENT_DATE=$(date +%s)
            ((diff=CURRENT_DATE-FOLDER_DATE))
            ((days=diff/(60*60*24)))

            # Mark folders older than 2 years
            if [ $days -ge 730 ]; then
                COMMENT+="[2 years old]"
            fi
        fi
    fi

    # Print the folder information
    echo -e "${ROOT_FOLDER}/${FOLDER},${INODES},${USER},${DATE},${COMMENT}"
}

# Export the function and variables for use in GNU Parallel
export -f process_folder
export ROOT_FOLDER
export RED
export NC

# Use GNU Parallel to process each folder in parallel
echo "${FIND}" | parallel --will-cite -j 10 process_folder {} | sort -t',' -k2 -n -r | column -s',' -t -N "FOLDER,INODES,USER,DATE,COMMENT"
